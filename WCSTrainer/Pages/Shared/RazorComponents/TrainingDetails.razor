@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Identity;

@inject WCSTrainer.Data.WCSTrainerContext _context
@inject SignInManager<UserAccount> SignInManager
@inject UserManager<UserAccount> UserManager

@if (TrainingOrder != null) {
   <div class="title-row">
      <p class="title">Created - @TrainingOrder.CreateDate</p>
   </div>
   <div class="text-group">
      <p class="title">Trainee</p>
      <div class="info">
         @if (TrainingOrder.Trainee != null) {
            <div class="pill trainee">@TrainingOrder.Trainee.FirstName @TrainingOrder.Trainee.LastName</div>
         }
      </div>
   </div>
   <div class="text-group">
      <p class="title">Lesson</p>
      <div class="info">
         @if (TrainingOrder.Lesson != null) {
            <div class="pill green">@TrainingOrder.Lesson.Name</div>
         }
      </div>
   </div>
   <div class="text-group">
      <p class="title">Created By</p>
      @if (TrainingOrder.CreatedByUserId != null) {
         <p class="info">@CreatedByUserName</p>
      }
   </div>
   if (TrainingOrder.ParentSkill != null) {
      <div class="text-group">
         <p class="title">Parent Skill</p>
         <div class="info">
            <div class="pill yellow">@TrainingOrder.ParentSkill.Name</div>
         </div>
      </div>
   }
   @if (!TrainingOrder.Status.Equals("Awaiting Approval")) {
      <div class="title-row">
         <p class="title">Approved - @TrainingOrder.ApprovalDate</p>
      </div>
      <div class="text-group">
         <p class="title">Trainers</p>
         <div class="info">
            @foreach (var trainer in TrainingOrder.Trainers) {
               <div class="pill">@trainer.FirstName @trainer.LastName</div>
            }
            @foreach (var trainer in TrainingOrder.TrainerGroups) {
               <div class="pill group">@trainer.Name</div>
            }
         </div>
      </div>

      <div class="text-group">
         <p class="title">Priority Level</p>
         <p class="info">@TrainingOrder.Priority</p>
      </div>
      <div class="text-group">
         <p class="title">Training Hours Needed</p>
         <p class="info">@TrainingOrder.Duration Hours</p>
      </div>
      if (TrainingOrder.Location != null) {
         <div class="text-group">
            <p class="title">Location</p>
            <p class="info">@TrainingOrder.Location.Name</p>
         </div>
      }
      <div class="text-group">
         <p class="title">Learning Medium</p>
         <p class="info">@TrainingOrder.Medium</p>
      </div>
      <div class="text-group">
         <p class="title">Begin Date</p>
         <p class="info">@TrainingOrder.BeginDate</p>
      </div>
   }
   @if (!TrainingOrder.Status.Equals("Awaiting Approval") && !TrainingOrder.Status.Equals("Active")) {
      <div class="title-row">
         <p class="title">Completed - @TrainingOrder.CompletionDate</p>
      </div>
      <div class="text-group">
         <p class="title">Closing Notes</p>
         <pre class="info">@TrainingOrder.ClosingNotes</pre>
      </div>
   }
   @if (TrainingOrder.Status.Equals("Verified")) {
      if (TrainingOrder.Verification != null) {
         <div class="title-row">
            <p class="title">Verified - @TrainingOrder.Verification.VerifyDate</p>
         </div>
         <div class="text-group">
            <p class="title">Signed By</p>
            <p class="info">@TrainingOrder.Verification.Signature</p>
         </div>
         <div class="text-group">
            <p class="title">Effectiveness</p>
            <pre class="info">@TrainingOrder.Verification.VerifyNotes</pre>
         </div>
      }
   }
} else {
   <p>Loading...</p>
}

@code {
   [Parameter]
   public int OrderId { get; set; }

   private TrainingOrder TrainingOrder = default!;
   private string CreatedByUserName = "Unknown";

   protected override async Task OnInitializedAsync() {
      await LoadTrainingOrderAsync();
   }

   protected override async Task OnParametersSetAsync() {
      await LoadTrainingOrderAsync();
   }

   private async Task LoadTrainingOrderAsync() {
      var trainingOrder = await _context.TrainingOrders
          .Include(t => t.Trainee)
          .Include(t => t.Location)
          .Include(t => t.Trainers)
          .Include(t => t.Verification)
          .Include(t => t.TrainerGroups)
          .Include(t => t.ParentSkill)
          .Include(t => t.Lesson)
          .FirstOrDefaultAsync(m => m.Id == OrderId);

      if (trainingOrder != null) {
         TrainingOrder = trainingOrder;

         if (TrainingOrder.CreatedByUserId != null) {
            var user = await UserManager.FindByIdAsync(TrainingOrder.CreatedByUserId);
            CreatedByUserName = user?.UserName ?? "Unknown";
         }
      }
   }
}