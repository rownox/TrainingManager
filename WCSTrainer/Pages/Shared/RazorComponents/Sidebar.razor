@inject NavigationManager Navigation
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@inject SignInManager<UserAccount> SignInManager
@inject UserManager<UserAccount> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="side-bar">
   <div class="link-list">
      @if (Navigation.Uri.Contains("TrainingOrders")) {
         <a href="/TrainingOrders" class="selected btn btnMenu">Training Orders</a>
      } else {
         <a href="/TrainingOrders" class="btn btnMenu">Training Orders</a>
      }

      @if (isAdmin) {
         @foreach (var link in links) {
            if (Navigation.Uri.Contains(link.Item1)) {
               <a href="/@link.Item1" class="selected btn btnMenu">@link.Item2</a>
            } else {
               <a href="/@link.Item1" class="btn btnMenu">@link.Item2</a>
            }
         }
      }
   </div>
</div>

@code {
   private bool isAdmin = false;
   private List<(string, string)> links = new List<(string, string)> {
      ("Lessons", "Lessons"),
      ("Skills", "Skills"),
      ("TrainerGroups", "Trainer Groups"),
      ("Locations", "Locations"),
      ("Accounts", "User Accounts"),
   };

   protected override async Task OnInitializedAsync() {
      var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
      var user = authState.User;

      if (user.Identity.IsAuthenticated) {
         var userAccount = await UserManager.GetUserAsync(user);
         if (userAccount != null) {
            isAdmin = await UserManager.IsInRoleAsync(userAccount, "admin");
         }
      }
   }
}