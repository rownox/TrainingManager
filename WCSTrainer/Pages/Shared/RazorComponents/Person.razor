@using Microsoft.EntityFrameworkCore
@inject WCSTrainer.Data.WCSTrainerContext _context

@if (employee != null) {
   <div class="title-row">
      <p class="title">Employee Info</p>
   </div>
   <div class="text-group">
      <p class="title">Employee ID</p>
      <p class="info">@employee.Id</p>
   </div>
   <div class="text-group">
      <p class="title">First Name</p>
      <p class="info">@employee.FirstName</p>
   </div>
   <div class="text-group">
      <p class="title">Last Name</p>
      <p class="info">@employee.LastName</p>
   </div>
   <div class="text-group">
      <p class="title">Status</p>
      <p class="info">@employee.Status</p>
   </div>
   <div class="text-group">
      <p class="title">Skills</p>
      <div class="info">
         <div class="skills-container">
            @foreach (var skill in employee.Skills) {
               <div class="skill-box">
                  <div class="title-container">
                     <a href="/Skills/Details?id=@skill.Id" class="skill-title">@skill.Name @skill.Id</a>
                  </div>
                  <div class="order-list">
                     @foreach (var order in employee.TrainingOrdersAsTrainee) {
                        var cssClass = order.Archived ? "pill inactive" : "pill";
                        if (order.ParentSkillId == skill.Id) {
                           <div class="order-block">
                              <a href="/TrainingOrders/Details?id=@order.Id" class="@cssClass">TO #@order.Id</a>
                              @{
                                 var type = "awaiting";
                                 if (order.Status.Equals("Active")) {
                                    type = "active";
                                 } else if (order.Status.Equals("Verified")) {
                                    type = "verified";
                                 } else if (order.Status.Equals("Completed")) {
                                    type = "completed";
                                 }
                                 <p class="@type dot" title="@order.Status">⬤</p>
                              }
                           </div>
                        }
                     }
                  </div>
               </div>
            }
         </div>
      </div>
   </div>
   <div class="text-group">
      <p class="title">Assigned Learning</p>
      <div class="info">
         @foreach (var order in employee.TrainingOrdersAsTrainee.OrderBy(o => o.Archived || o.Status != "Active")) {
            var cssClass = order.Archived ? "pill inactive" : "pill";
            if (order.ParentSkill == null) {
               <a href="/TrainingOrders/Details?id=@order.Id" class="@cssClass">TO #@order.Id</a>
            }
         }
      </div>
   </div>
   <div class="text-group">
      <p class="title">Assigned Teaching</p>
      <div class="info">
         @foreach (var order in employee.TrainingOrdersAsTrainer.OrderBy(o => o.Archived || o.Status != "Active")) {
            var cssClass = order.Archived ? "pill inactive" : "pill";
            <a href="/TrainingOrders/Details?id=@order.Id" class="@cssClass">TO #@order.Id</a>
         }
      </div>
   </div>
   <div class="text-group">
      <p class="title">Affiliated Groups</p>
      <div class="info">
         @foreach (var group in employee.Groups) {
            <a href="/TrainerGroups/Details?id=@group.Id" class="pill">@group.Name</a>
         }
      </div>
   </div>
} else {
   <p>Loading...</p>
}


@code {
   [Parameter]
   public int EmployeeId { get; set; }

   private Employee employee = default!;

   protected override async Task OnInitializedAsync() {
      await LoadTrainingOrderAsync();
   }

   protected override async Task OnParametersSetAsync() {
      await LoadTrainingOrderAsync();
   }

   private async Task LoadTrainingOrderAsync() {
      var tempEmployee = await _context.Employees
          .Include(e => e.TrainingOrdersAsTrainer)
          .Include(e => e.TrainingOrdersAsTrainee)
            .ThenInclude(t => t.ParentSkill)
          .Include(e => e.Groups)
          .Include(e => e.Skills)
          .FirstOrDefaultAsync(m => m.Id == EmployeeId);

      if (tempEmployee != null) {
         employee = tempEmployee;
      }
   }
}