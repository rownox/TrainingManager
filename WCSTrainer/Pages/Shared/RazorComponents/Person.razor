@using Microsoft.EntityFrameworkCore
@inject WCSTrainer.Data.WCSTrainerContext _context
@if (employee != null) {
   <div class="field-section-container">
      <div class="field-section">
         <div class="field-section">
            <div class="title-row">
               <p class="title">Employee Details</p>
            </div>
            <table>
               <tbody>
                  <tr>
                     <td class="label">Employee ID</td>
                     <td class="text">@employee.Id</td>
                  </tr>
                  <tr>
                     <td class="label">Full Name</td>
                     <td class="text">@employee.FirstName @employee.LastName</td>
                  </tr>
                  <tr>
                     <td class="label">Status</td>
                     <td class="text">@employee.Status</td>
                  </tr>
                  <tr>
                     <td class="label">Department</td>
                     <td class="text">
                        <div class="pills-container">
                           @foreach (var department in employee.TrainerDepartments)
                           {
                              <a class="pill">@department.Name</a>
                           }
                        </div>
                     </td>
                  </tr>
                  <tr>
                     <td class="label">Affiliated Groups</td>
                     <td class="text">
                        <div class="pills-container">
                        @foreach (var group in employee.Groups) {
                           <a href="/TrainerGroups/Details?id=@group.Id" class="pill">@group.Name</a>
                        }
                        </div>
                     </td>
                  </tr>
               </tbody>
            </table>
         </div>

         <div class="field-section">
            <div class="title-row">
               <p class="title">Linked Training Orders</p>
            </div>
         @{
            setOrders(employee.TrainingOrdersAsTrainee);
         }
            <table>
               <thead>
                  <tr>
                     <th>Assigned Learning <br /> (@activeHours Hours)</th>
                     <th>Completed Learning <br /> (@completeHours Hours)</th>
                     <th>Assigned Teaching <br /> (@activeHours Hours)</th>
                     <th>Completed Teaching <br /> (@completeHours Hours)</th>
                  </tr>
               </thead>
               <tbody>
                  <tr>
                     <td class="column">
                        <div class="pills-container">
                        @foreach (var order in activeOrders) {
                           var cssClass = order.Archived ? "pill inactive" : "pill";
                           <a href="/TrainingOrders/Details?id=@order.Id" class="@cssClass">TO #@order.Id - @order.Lesson.Name</a>
                        }
                        </div>
                     </td>
                     <td class="column">
                        <div class="pills-container">
                        @foreach (var order in completeOrders) {
                           var cssClass = order.Archived ? "pill inactive" : "pill";
                           <a href="/TrainingOrders/Details?id=@order.Id" class="@cssClass">TO #@order.Id - @order.Lesson.Name</a>
                        }
                        </div>
                     </td>
                     <td class="column">
                        <div class="pills-container">
                        @{
                           setOrders(employee.TrainingOrdersAsTrainer);
                           foreach (var order in activeOrders) {
                              var cssClass = order.Archived ? "pill inactive" : "pill";
                              <a href="/TrainingOrders/Details?id=@order.Id" class="@cssClass">TO #@order.Id - @order.Lesson.Name</a>
                           }
                        }
                        </div>
                     </td>
                     <td class="column">
                        <div class="pills-container">
                        @{
                           setOrders(employee.TrainingOrdersAsTrainer);
                           foreach (var order in completeOrders) {
                              var cssClass = order.Archived ? "pill inactive" : "pill";
                              <a href="/TrainingOrders/Details?id=@order.Id" class="@cssClass">TO #@order.Id - @order.Lesson.Name</a>
                           }
                        }
                        </div>
                     </td>
                  </tr>
               </tbody>
            </table>
         </div>
      </div>

      <div class="field-section">
         <div class="title-row">
            <p class="title">Skills</p>
         </div>
         <table>
            <tbody>
               <tr>
                  <td class="column">
                     <div class="skills-container">
                     @foreach (var skill in employee.Skills)
                     {
                        <div class="skill-box">
                           <div class="title-container">
                              <a href="/Skills/Details?id=@skill.Id" class="skill-title">@skill.Name</a>
                           </div>
                           <div class="order-list">
                        @foreach (var order in employee.TrainingOrdersAsTrainee)
                        {
                           var cssClass = order.Archived ? "pill inactive" : "pill";
                           if (order.ParentSkillId == skill.Id)
                           {
                              <div class="order-block">
                                 <a href="/TrainingOrders/Details?id=@order.Id" class="@cssClass">TO #@order.Id - @order.Lesson.Name</a>
                                 @{
                                    var type = order.Status.ToLower();
                                    <p class="@type dot" title="@order.Status">⬤</p>
                                 }
                              </div>
                           }
                        }
                           </div>
                        </div>
                     }
                     </div>
                  </td>
               </tr>
            </tbody>
         </table>
      </div>
   </div>
} else {
      <p>Loading...</p>
}


@code {
   [Parameter]
   public int EmployeeId { get; set; }

   private Employee employee = default!;

   List<TrainingOrder> completeOrders = new List<TrainingOrder>();
   List<TrainingOrder> activeOrders = new List<TrainingOrder>();
   int completeHours = 0;
   int activeHours = 0;

   protected override async Task OnInitializedAsync() {
      await LoadTrainingOrderAsync();
   }

   protected override async Task OnParametersSetAsync() {
      await LoadTrainingOrderAsync();
   }

   private async Task LoadTrainingOrderAsync() {
      var tempEmployee = await _context.Employees
         .Include(e => e.TrainingOrdersAsTrainer)
            .ThenInclude(t => t.Lesson)
         .Include(e => e.TrainingOrdersAsTrainee)
            .ThenInclude(t => t.ParentSkill)
         .Include(e => e.TrainingOrdersAsTrainee)
            .ThenInclude(t => t.Lesson)
         .Include(e => e.Groups)
         .Include(e => e.Skills)
         .FirstOrDefaultAsync(m => m.Id == EmployeeId);

      if (tempEmployee != null) {
         employee = tempEmployee;
      }
   }



   public void setOrders(ICollection<TrainingOrder> orders) {
      completeHours = 0;
      activeHours = 0;
      completeOrders.Clear();
      activeOrders.Clear();

      foreach (var order in orders.OrderBy(o => o.Archived)) {
         if (order.Status == "Completed" || order.Status == "Verified") {
            if (order.Lesson != null) {
               completeHours = completeHours + order.Lesson.Duration;
            }
            completeOrders.Add(order);
         }
         else {
            if (!order.Archived) {
               if (order.Lesson != null) {
                  activeHours = activeHours + order.Lesson.Duration;
               }
            }
            activeOrders.Add(order);
         }
      }
   }
}