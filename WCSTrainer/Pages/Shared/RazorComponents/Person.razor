@using Microsoft.EntityFrameworkCore
@inject WCSTrainer.Data.WCSTrainerContext _context

@if (employee != null) {
   <div class="title-row">
      <p class="title">Employee Info</p>
   </div>
   <div class="text-group">
      <p class="title">Employee ID</p>
      <p class="info">@employee.Id</p>
   </div>
   <div class="text-group">
      <p class="title">Full Name</p>
      <p class="info">@employee.FirstName @employee.LastName</p>
   </div>
   <div class="text-group">
      <p class="title">Status</p>
      <p class="info">@employee.Status</p>
   </div>
   <div class="text-group">
      <p class="title">Skills</p>
      <div class="info">
         <div class="skills-container">
            @foreach (var skill in employee.Skills) {
               <div class="skill-box">
                  <div class="title-container">
                     <a href="/Skills/Details?id=@skill.Id" class="skill-title">@skill.Name @skill.Id</a>
                  </div>
                  <div class="order-list">
                     @foreach (var order in employee.TrainingOrdersAsTrainee) {
                        var cssClass = order.Archived ? "pill inactive" : "pill";
                        if (order.ParentSkillId == skill.Id) {
                           <div class="order-block">
                              <a href="/TrainingOrders/Details?id=@order.Id" class="@cssClass">TO #@order.Id</a>
                              @{
                                 var type = "awaiting";
                                 if (order.Status.Equals("Active")) {
                                    type = "active";
                                 } else if (order.Status.Equals("Verified")) {
                                    type = "verified";
                                 } else if (order.Status.Equals("Completed")) {
                                    type = "completed";
                                 }
                                 <p class="@type dot" title="@order.Status">⬤</p>
                              }
                           </div>
                        }
                     }
                  </div>
               </div>
            }
         </div>
      </div>
   </div>
   
   setOrders(employee.TrainingOrdersAsTrainee);
   <div class="text-group">
      <p class="title">Assigned Learning (@activeHours Hours)</p>
      <div class="info">
         @foreach (var order in activeOrders) {
            var cssClass = order.Archived ? "pill inactive" : "pill";
            <a href="/TrainingOrders/Details?id=@order.Id" class="@cssClass">TO #@order.Id</a>
         }
      </div>
   </div>
   <div class="text-group">
      <p class="title">Completed Learning (@completeHours Hours)</p>
      <div class="info">
         @foreach (var order in completeOrders) {
            var cssClass = order.Archived ? "pill inactive" : "pill";
            <a href="/TrainingOrders/Details?id=@order.Id" class="@cssClass">TO #@order.Id</a>
         }
      </div>
   </div>

   <div class="text-group">
      <p class="title">Assigned Teaching (@activeHours Hours)</p>
      <div class="info">
         @{
            setOrders(employee.TrainingOrdersAsTrainer);
            foreach (var order in activeOrders) {
               var cssClass = order.Archived ? "pill inactive" : "pill";
               <a href="/TrainingOrders/Details?id=@order.Id" class="@cssClass">TO #@order.Id</a>
            }
            foreach (var group in employee.Groups) {
               setOrders(group.TrainingOrders);
               foreach (var order in activeOrders) {
                  var cssClass = order.Archived ? "pill inactive" : "pill";
                  <a href="/TrainingOrders/Details?id=@order.Id" class="@cssClass">TO #@order.Id</a>
               }
            }
         }
      </div>
   </div>
   <div class="text-group">
      <p class="title">Completed Teaching (@completeHours Hours)</p>
      <div class="info">
         @{
            setOrders(employee.TrainingOrdersAsTrainer);
            foreach (var order in completeOrders) {
               var cssClass = order.Archived ? "pill inactive" : "pill";
               <a href="/TrainingOrders/Details?id=@order.Id" class="@cssClass">TO #@order.Id</a>
            }
            foreach (var group in employee.Groups) {
               setOrders(group.TrainingOrders);
               foreach (var order in completeOrders) {
                  var cssClass = order.Archived ? "pill inactive" : "pill";
                  <a href="/TrainingOrders/Details?id=@order.Id" class="@cssClass">TO #@order.Id</a>
               }
            }
         }
      </div>
   </div>
   <div class="text-group">
      <p class="title">Affiliated Groups</p>
      <div class="info">
         @foreach (var group in employee.Groups) {
            <a href="/TrainerGroups/Details?id=@group.Id" class="pill">@group.Name</a>
         }
      </div>
   </div>
} else {
   <p>Loading...</p>
}


@code {
   [Parameter]
   public int EmployeeId { get; set; }

   private Employee employee = default!;

   List<TrainingOrder> completeOrders = new List<TrainingOrder>();
   List<TrainingOrder> activeOrders = new List<TrainingOrder>();
   int completeHours = 0;
   int activeHours = 0;

   protected override async Task OnInitializedAsync() {
      await LoadTrainingOrderAsync();
   }

   protected override async Task OnParametersSetAsync() {
      await LoadTrainingOrderAsync();
   }

   private async Task LoadTrainingOrderAsync() {
      var tempEmployee = await _context.Employees
          .Include(e => e.TrainingOrdersAsTrainer)
          .Include(e => e.TrainingOrdersAsTrainee)
            .ThenInclude(t => t.ParentSkill)
          .Include(e => e.Groups)
            .ThenInclude(g => g.TrainingOrders)
       .Include(e => e.Skills)
          .FirstOrDefaultAsync(m => m.Id == EmployeeId);

      if (tempEmployee != null) {
         employee = tempEmployee;
      }
   }



   public void setOrders(ICollection<TrainingOrder> orders) {
      completeHours = 0;
      activeHours = 0;
      completeOrders.Clear();
      activeOrders.Clear();

      foreach (var order in orders.OrderBy(o => o.Archived)) {
         if (order.Status == "Completed" || order.Status == "Verified") {
            completeHours = completeHours + order.Duration;
            completeOrders.Add(order);
         } else {
            if (!order.Archived) {
               activeHours = activeHours + order.Duration;
            }
            activeOrders.Add(order);
         }
      }
   }
}