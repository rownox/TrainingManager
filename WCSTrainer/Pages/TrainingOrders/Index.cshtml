@page
@model WCSTrainer.Pages.TrainingOrders.IndexModel
@using Microsoft.AspNetCore.Identity
@inject SignInManager<UserAccount> SignInManager
@inject UserManager<UserAccount> UserManager

@{
   var type = "";
   string name = "";
   var text = "";
   var searchText = "";

   void loadVars(TrainingOrder item) {
      type = "awaiting";
      name = "";
      text = "";
      searchText = "";

      if (item.Trainee != null) {
         name = item.Trainee.FirstName + " " + item.Trainee.LastName;
      } else {
         name = "N/A";
      }
      if (item.Status.Equals("Active")) {
         type = "active";
      } else if (item.Status.Equals("Verified")) {
         type = "verified";
      } else if (item.Status.Equals("Completed")) {
         type = "completed";
      }
      if (item.Lesson != null) {
         text = item.Lesson.Name;
      }
      searchText = text + name;
   }
}

<div class="panel">
   <div class="body">
      <partial name="_Sidebar" />
      <div class="properties">
         <div class="list-container">
            <form method="post" id="maxCountForm" class="top">
               <div class="left">
                  <select asp-for="MaxCount" class="drop-main" onchange="updateMaxCount(this.value)">
                     <option value="10">10</option>
                     <option value="25">25</option>
                     <option value="50">50</option>
                  </select>
                  @if (Model.Detailed) {

                  }
               </div>
               <div class="right">
                  <input asp-for="Detailed" value="@(Model.Detailed ? "False" : "True")" type="hidden" />
                  <button type="submit" class="btn btnWhite bg-btn">@(Model.Detailed ? "Simple View" : "Detailed View")</button>
               </div>
            </form>
            @if (SignInManager.IsSignedIn(User)) {
               var user = await UserManager.GetUserAsync(User);
               if (user != null) {
                  if (!Model.Detailed) {
                     <div class="order-list">
                        <ul>
                           @{
                              int itemCount = 0;
                              foreach (var item in Model.TrainingOrder.Reverse()) {
                                 if (TrainingOrderHelper.OrderInvolves(UserManager, User, item).Result == false) {
                                    continue;
                                 }
                                 loadVars(item);
                                 <li id="@item.Id" class="@type @item.Status @(item.Archived ? "Archived" : "") searchable" data-name="@searchText">
                                    <div class="info">
                                       <div class="title">
                                          @{
                                             var archived = "archived";

                                             if (item.Archived == false) {
                                                archived = "unarchived";
                                             }
                                             <a class="name @archived" asp-page="./Details" asp-route-id="@item.Id">TO #@item.Id - @text</a>

                                             if (item.ParentSkill != null) {
                                                <a class="skill-name black-pill" href="/Skills/Details?id=@item.ParentSkill.Id">@item.ParentSkill.Name</a>
                                             }
                                          }
                                       </div>
                                       <div class="sub">
                                          <div class="sub-text">
                                             <p class="identifier">Trainee - @name</p>
                                          </div>

                                       </div>
                                    </div>
                                    <div class="btns">
                                       @{
                                          var isOwner = await UserManager.IsInRoleAsync(user, "owner");
                                          if (isOwner) {
                                             <a class="btn bg-btn btnRed" asp-page="./Delete" asp-route-id="@item.Id">Delete</a>
                                          }
                                       }
                                    </div>
                                 </li>
                                 itemCount++;
                              }
                           }
                        </ul>
                     </div>
                  } else {
                     <table id="dataTable" class="order-table">
                        <tr>
                           <th>Order ID</th>
                           <th>Trainee</th>
                           <th>Priority Level</th>
                           <th></th>
                        </tr>
                        @foreach (var item in Model.TrainingOrder.Reverse()) {
                           if (TrainingOrderHelper.OrderInvolves(UserManager, User, item).Result == false) {
                              continue;
                           }
                           loadVars(item);
                           <tr id="@item.Id" class="@type @item.Status searchable" data-name="@searchText">
                              <td>@item.Id</td>
                              @foreach (var employee in Model.Employees) {
                                 if (employee.Id == item.TraineeId) {
                                    <td>@employee.FirstName @employee.LastName</td>
                                 }
                              }
                              <td>@item.Priority</td>
                              <td>
                                 <a asp-page="./Details" asp-route-id="@item.Id" class="btn nbg-btn btnWhite">View</a>
                              </td>
                           </tr>
                        }
                     </table>
                  }
               }
            }
         </div>

         <div class="tool-container">
            <div class="tools">
               <p class="title">Options:</p>
               <div class="search">
                  <input class="search-box" id="searchInput" placeholder="Search Training Orders" type="search" oninput="searchTrainingOrders()" />
               </div>
               <div class="selections">
                  <p class="section-title">Show List Items:</p>
                  <div class="section">
                     <p class="section-info archived">Archived</p>
                     <input type="checkbox" id="Archived" onchange="checkedBox(this)" />
                  </div>
                  <div class="section">
                     <p class="section-info verified">Verified</p>
                     <input type="checkbox" checked id="Verified" onchange="checkedBox(this)" />
                  </div>
                  <div class="section">
                     <p class="section-info completed">Completed</p>
                     <input type="checkbox" checked id="Completed" onchange="checkedBox(this)" />
                  </div>
                  <div class="section">
                     <p class="section-info active">Active</p>
                     <input type="checkbox" checked id="Active" onchange="checkedBox(this)" />
                  </div>
                  <div class="section">
                     <p class="section-info awaiting">Awaiting Approval</p>
                     <input type="checkbox" checked id="Awaiting Approval" onchange="checkedBox(this)" />
                  </div>
               </div>
               <div class="btns">
                  <a asp-page="Create" class="btn btnMenu">Create Training Order</a>
                  <a asp-page="Scheduling" class="btn btnMenu">Scheduling</a>
               </div>
            </div>
         </div>
      </div>
   </div>
</div>

<script src="~/js/trainingOrderList.js"></script>
