<div class="people-container">
    <div class="search">
        <input type="search" placeholder="Search By Name" @bind="searchText" />
    </div>
    <div class="people">
        @foreach (var employee in FilteredEmployees) {
            if (!addTrainees) {
                if (employee.Status.Equals("Trainer")) {
                    <div class="person" @onclick="() => SelectEmployee(employee)">
                        <div>
                            <p>@employee.FirstName @employee.LastName</p>
                        </div>
                        <div>
                            <p>Status: @employee.Status</p>
                        </div>
                    </div>
                }
            } else {
                <div class="person" @onclick="() => SelectEmployee(employee)">
                    <div>
                        <p>@employee.FirstName @employee.LastName</p>
                    </div>
                    <div>
                        <p>Status: @employee.Status</p>
                    </div>
                </div>
            }
        }
    </div>
</div>
<div class="details">
    @if (selectedEmployee != null) {
        <p class="title">@selectedEmployee.FirstName @selectedEmployee.LastName</p>
        <p>Availability: @selectedEmployee.Availability</p>
    }
</div>

@code {
    @using WCSTrainer.Models

    [Parameter]
    public bool addTrainees { get; set; }
    [Parameter]
    public IList<Employee> Employees { get; set; }

    private Employee? selectedEmployee;
    private string searchText = "";

    private IEnumerable<Employee> FilteredEmployees =>
        string.IsNullOrWhiteSpace(searchText)
        ? Employees
        : Employees.Where(e => e.FirstName.Contains(searchText, StringComparison.OrdinalIgnoreCase) || e.LastName.Contains(searchText, StringComparison.OrdinalIgnoreCase));

    private void SelectEmployee(Employee employee) {
        selectedEmployee = employee;
        StateHasChanged();
    }
}
