@page
@model WCSTrainer.Pages.Lessons.DetailsModel

@using Microsoft.AspNetCore.Identity
@inject SignInManager<UserAccount> SignInManager
@inject UserManager<UserAccount> UserManager

@using System.Text.RegularExpressions

@functions {
   public string ConvertContent(string content)
   {
      var urlRegex = new Regex(@"(http|https)://[^\s]+|[a-zA-Z]:\\[^\s]+");
      return urlRegex.Replace(content, match =>
      {
         var url = match.Value;

         if (url.Contains("youtube.com/watch?v=") || url.Contains("youtu.be/"))
         {
            var videoId = ExtractYouTubeId(url);
            if (videoId != null)
            {
               return $"<iframe class=\"description-video\" src=\"https://www.youtube.com/embed/{videoId}\" frameborder=\"0\" allowfullscreen></iframe>";
            }
         }
         else if (Regex.IsMatch(url, @"^H:\\"))
         {
            var webPath = ConvertToWebPath(url, "H:/", "/Shared/");
            return $"<iframe src=\"{webPath}\" frameborder=\"0\" width=\"100%\" height=\"500\"></iframe>";
         }
         else if (Regex.IsMatch(url, @"^D:\\"))
         {
            var webPath = ConvertToWebPath(url, "D:/", "/Shared/");
            var fileName = System.IO.Path.GetFileName(url);
            return $"<a class=\"btn btnWhite bg-btn\" href=\"{webPath}\" download>Download {fileName}</a>";
         }
         return $"<a class=\"description-link\" href=\"{url}\" target=\"_blank\">{url}</a>";
      });
   }

   private string ConvertToWebPath(string filePath, string drivePrefix, string webPrefix)
   {
      return filePath.Replace("\\", "/").Replace(drivePrefix, webPrefix);
   }

   private string ExtractYouTubeId(string url)
   {
      var youtubeIdRegex = new Regex(@"(?:https?:\/\/)?(?:www\.)?(?:youtube\.com\/watch\?v=|youtu\.be\/)([a-zA-Z0-9_-]{11})");
      var match = youtubeIdRegex.Match(url);
      return match.Success ? match.Groups[1].Value : null;
   }
}


<div class="panel">
   <div class="body">
      <partial name="_Sidebar" />
      <div class="properties">
         <div class="user-form">
            <p class="title">Lesson #@Model.Lesson.Id</p>
            <div class="field-container">
               <div class="title-row">
                  <p class="title">Details</p>
               </div>
               <div class="text-group">
                  <p class="title">Name</p>
                  <p class="info">@Model.Lesson.Name</p>
               </div>
               <div class="text-group">
                  <p class="title">Description</p>
                  <div class="info">
                     @if (Model.Lesson.Descriptions.Any()) {
                        @foreach (var description in Model.Lesson.Descriptions.Reverse())
                        {
                           if (description != null)
                           {
                              @if (!string.IsNullOrWhiteSpace(description.TextContent))
                              {
                                 <pre class="description-container">@Html.Raw(ConvertContent(description.TextContent))</pre>
                              }
                              @if (description.FileUpload != null)
                              {
                                 <img src="~/@description.FileUpload.FilePath" alt="[Could not load image.]" />
                              }
                           }
                        }
                     }
                  </div>
               </div>
            </div>
            <div class="btn-container">
               @* <a class="btn bg-btn btnGreen" asp-page="./Edit" asp-route-id="@Model.Lesson.Id">Edit</a> *@
               @if (SignInManager.IsSignedIn(User))
               {
                  var user = await UserManager.GetUserAsync(User);
                  if (user != null)
                  {
                     var isOwner = await UserManager.IsInRoleAsync(user, "owner");
                     if (isOwner)
                     {
                        <a class="btn bg-btn btnRed" asp-page="./Delete" asp-route-id="@Model.Lesson.Id">Delete</a>
                     }
                  }
               }
            </div>
         </div>
      </div>
   </div>
</div>
